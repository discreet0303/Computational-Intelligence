import numpy
import math

from src.algorithm.MathAlgorithm import MathAlgorithm

class RBFN():

    def __init__(self, nNum, dimension):
        self.nNum = nNum
        self.dimension = dimension

        self.theta = 0
        self.W = []
        self.M = []
        self.sigma = []

    def geneVectorTransform(self, vector):
        self.theta = vector[0]
        self.W = vector[1:(self.nNum + 1)]
        temp = []
        for nIndex in range(self.nNum):
            startIndex = 1 + self.nNum + nIndex * self.dimension
            temp.append(vector[startIndex:(startIndex + self.dimension)])
        self.M = temp
        self.sigma = vector[(1 + self.nNum + self.nNum * self.dimension):]
    
    def getOutput(self, x):
        # print(self.W)
        output = self.theta
        for n in range(self.nNum):
            output += self.W[n] * math.exp(-1 * self.getHighDimVectorLength(x, self.M[n]) / (2 * self.sigma[n] * self.sigma[n]))
        return output 
    
    def getHighDimVectorLength(self, x, y):
        vLen = 0
        for index in range(len(x)):
            vLen += (x[index] - y[index]) ** 2
        return vLen

    def setPara(self):
        print('setPara')
        self.theta = 0.27413031070271554
        self.W = [-0.2165564702584432, 0.43570801383368407, 0.25766919736016813, 0.8162115275208734, 0.8162821060763124, 0.8202941611263892, 0.42819618155989114, 0.08077460452911274]
        self.M = [
            [5.824353208226845, 13.444845433520543, 25.843555157662887],
            [24.72074663331964, 27.2452876319428, 4.26792413219178],
            [29.879182972982075, 17.71580854125198, 6.590448633825639],
            [0.8439619974605179, 25.090933045508315, 15.210407312007572],
            [26.40874256181456, 25.714038156109435, 29.958432120639543],
            [0.3486954447339934, 29.887137298021543, 22.942949780787536],
            [23.7447902299137, 19.17562948615331, 7.703035677504062],
            [6.924410903031947, 14.185147813621386, 10.955673223625558]
        ]
        self.sigma = [3.9415175026251936, 9.477755884503381, 0.2730688547204743, 8.259032578761945, 2.933900572696063, 3.3994091470723804, 9.982899337717233, 1.196458072994222]

        vector = [0.27413031070271554, -0.2165564702584432, 0.43570801383368407, 0.25766919736016813, 0.8162115275208734, 0.8162821060763124, 0.8202941611263892, 0.42819618155989114, 0.08077460452911274, 5.824353208226845, 13.444845433520543, 25.843555157662887,24.72074663331964, 27.2452876319428, 4.26792413219178,29.879182972982075, 17.71580854125198, 6.590448633825639,0.8439619974605179, 25.090933045508315, 15.210407312007572,26.40874256181456, 25.714038156109435, 29.958432120639543,0.3486954447339934, 29.887137298021543, 22.942949780787536,23.7447902299137, 9.17562948615331, 7.703035677504062,6.924410903031947, 14.185147813621386, 10.955673223625558,3.9415175026251936, 9.477755884503381, 0.2730688547204743, 8.259032578761945, 2.933900572696063, 3.3994091470723804, 9.982899337717233, 1.196458072994222]